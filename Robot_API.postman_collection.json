{
    "info": {
        "name": "Robot API",
        "description": "A collection for testing the Robot API endpoints with HATEOAS navigation and pagination. Supports local development, cloud HTTP, and cloud HTTPS deployment testing.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "local",
            "value": "http://localhost:8080",
            "type": "string"
        },
        {
            "key": "cloudHttp",
            "value": "http://robot-api-milad9a.westeurope.azurecontainer.io:8080",
            "type": "string"
        },
        {
            "key": "cloudHttps",
            "value": "https://robot-api-https-milad9a.westeurope.cloudapp.azure.com",
            "type": "string"
        },
        {
            "key": "url",
            "value": "{{local}}",
            "type": "string"
        },
        {
            "key": "robotId",
            "value": "robot1",
            "type": "string"
        },
        {
            "key": "itemId",
            "value": "item1",
            "type": "string"
        },
        {
            "key": "actionsLink",
            "value": "",
            "type": "string"
        },
        {
            "key": "nextPageLink",
            "value": "",
            "type": "string"
        },
        {
            "key": "prevPageLink",
            "value": "",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Health Check",
            "request": {
                "method": "GET",
                "url": {
                    "raw": "{{url}}/health",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "health"
                    ]
                },
                "description": "Health check endpoint to verify API is running. Switch {{url}} to {{local}}, {{cloudHttp}}, or {{cloudHttps}} to test different environments."
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains health status\", function () {",
                            "    const responseBody = pm.response.json();",
                            "    pm.expect(responseBody.status).to.eql('healthy');",
                            "    pm.expect(responseBody.service).to.eql('robot-api');",
                            "});",
                            "",
                            "// Log the protocol being used",
                            "pm.test(\"Log current protocol\", function () {",
                            "    const url = pm.request.url.toString();",
                            "    if (url.startsWith('https://')) {",
                            "        console.log('‚úÖ Using HTTPS endpoint');",
                            "    } else {",
                            "        console.log('‚ÑπÔ∏è Using HTTP endpoint');",
                            "    }",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "HTTPS Health Check",
            "request": {
                "method": "GET",
                "url": {
                    "raw": "{{cloudHttps}}/health",
                    "host": [
                        "{{cloudHttps}}"
                    ],
                    "path": [
                        "health"
                    ]
                },
                "description": "Health check specifically for HTTPS endpoint testing"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains health status\", function () {",
                            "    const responseBody = pm.response.json();",
                            "    pm.expect(responseBody.status).to.eql('healthy');",
                            "    pm.expect(responseBody.service).to.eql('robot-api');",
                            "});",
                            "",
                            "pm.test(\"Confirm HTTPS usage\", function () {",
                            "    const url = pm.request.url.toString();",
                            "    pm.expect(url).to.include('https://');",
                            "    console.log('üîí Successfully tested HTTPS endpoint');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Get Available Items",
            "request": {
                "method": "GET",
                "url": {
                    "raw": "{{url}}/items",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "items"
                    ]
                },
                "description": "Returns all available items in the world"
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains items array\", function () {",
                            "    const responseBody = pm.response.json();",
                            "    pm.expect(responseBody.available_items).to.be.an('array');",
                            "    pm.expect(responseBody.total_count).to.be.a('number');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Get Robot Status",
            "request": {
                "method": "GET",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/status",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "status"
                    ]
                },
                "description": "Returns the current status of a robot including position, energy, and inventory. Includes HATEOAS links with proper HTTPS support."
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Test that response is OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "// Parse the response body",
                            "const responseBody = pm.response.json();",
                            "",
                            "// Test for presence of HATEOAS links",
                            "pm.test(\"Response contains HATEOAS links\", function () {",
                            "    pm.expect(responseBody.links).to.be.an('array').and.not.to.be.empty;",
                            "});",
                            "",
                            "// Test that HATEOAS links use the correct protocol",
                            "pm.test(\"HATEOAS links use correct protocol\", function () {",
                            "    const requestUrl = pm.request.url.toString();",
                            "    const isHttps = requestUrl.startsWith('https://');",
                            "    ",
                            "    responseBody.links.forEach(function(link) {",
                            "        if (isHttps) {",
                            "            pm.expect(link.href).to.include('https://');",
                            "        } else {",
                            "            pm.expect(link.href).to.include('http://');",
                            "        }",
                            "    });",
                            "});",
                            "",
                            "// Extract and store action links for later use",
                            "if (responseBody.links) {",
                            "    responseBody.links.forEach(function(link) {",
                            "        if (link.rel === 'actions') {",
                            "            pm.environment.set('actionsLink', link.href);",
                            "        }",
                            "    });",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Move Robot",
            "request": {
                "method": "POST",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/move",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "move"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"direction\": \"up\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "description": "Moves a robot in the specified direction (up, down, left, right)."
            },
            "response": []
        },
        {
            "name": "Pickup Item",
            "request": {
                "method": "POST",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/pickup/{{itemId}}",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "pickup",
                        "{{itemId}}"
                    ]
                },
                "description": "Makes a robot pick up an item and add it to its inventory."
            },
            "response": []
        },
        {
            "name": "Put Down Item",
            "request": {
                "method": "POST",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/putdown/{{itemId}}",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "putdown",
                        "{{itemId}}"
                    ]
                },
                "description": "Makes a robot put down an item from its inventory."
            },
            "response": []
        },
        {
            "name": "Update Robot State",
            "request": {
                "method": "PATCH",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/state",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "state"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"energy\": 80,\n  \"position\": {\n    \"x\": 5,\n    \"y\": 5\n  }\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "description": "Updates robot's state (energy and/or position)."
            },
            "response": []
        },
        {
            "name": "Get Robot Actions",
            "request": {
                "method": "GET",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/actions?page={{page}}&size={{size}}",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "actions"
                    ],
                    "query": [
                        {
                            "key": "page",
                            "value": "{{page}}",
                            "description": "Page number (starts at 1)"
                        },
                        {
                            "key": "size",
                            "value": "{{size}}",
                            "description": "Number of items per page"
                        }
                    ]
                },
                "description": "Returns a paginated history of actions performed by the robot with HATEOAS links for navigation."
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Test that response is OK",
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "// Parse the response body",
                            "const responseBody = pm.response.json();",
                            "",
                            "// Test for pagination information",
                            "pm.test(\"Response contains pagination info\", function () {",
                            "    pm.expect(responseBody.page).to.be.an('object');",
                            "    pm.expect(responseBody.page.number).to.be.a('number');",
                            "    pm.expect(responseBody.page.size).to.be.a('number');",
                            "    pm.expect(responseBody.page.totalElements).to.be.a('number');",
                            "    pm.expect(responseBody.page.totalPages).to.be.a('number');",
                            "});",
                            "",
                            "// Test for HATEOAS links",
                            "pm.test(\"Response contains navigation links\", function () {",
                            "    pm.expect(responseBody.links).to.be.an('array');",
                            "});",
                            "",
                            "// Store navigation links for later use",
                            "if (responseBody.links) {",
                            "    responseBody.links.forEach(function(link) {",
                            "        if (link.rel === 'next') {",
                            "            pm.environment.set('nextPageLink', link.href);",
                            "        }",
                            "        if (link.rel === 'previous') {",
                            "            pm.environment.set('prevPageLink', link.href);",
                            "        }",
                            "    });",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Set default values for pagination if not already set",
                            "if (!pm.environment.get('page')) {",
                            "    pm.environment.set('page', 1);",
                            "}",
                            "",
                            "if (!pm.environment.get('size')) {",
                            "    pm.environment.set('size', 5);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Attack Robot",
            "request": {
                "method": "POST",
                "url": {
                    "raw": "{{url}}/robot/{{robotId}}/attack/robot2",
                    "host": [
                        "{{url}}"
                    ],
                    "path": [
                        "robot",
                        "{{robotId}}",
                        "attack",
                        "robot2"
                    ]
                },
                "description": "Makes one robot attack another, reducing the target's energy."
            },
            "response": []
        }
    ]
}