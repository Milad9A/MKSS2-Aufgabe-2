# GitLab CI/CD Pipeline for Robot API

stages:
  - build
  - test
  - deploy

variables:
  GO_VERSION: "1.21"
  DOCKER_IMAGE_NAME: "robot-api"
  DOCKER_IMAGE_TAG: "latest"
  # GitLab Container Registry for HSB
  DOCKER_REGISTRY: "registry.gitlab.com/hsbremen/mkss2/sose-2025/labor"
  # Azure Deployment Configuration with HTTPS support
  AZURE_RESOURCE_GROUP: "robotApiGroup"
  AZURE_LOCATION: "westeurope"
  AZURE_CONTAINER_NAME: "robot-api-container"
  AZURE_DNS_LABEL: "robot-api-milad9a"
  # HTTPS Configuration
  AZURE_CERTIFICATE_NAME: "robot-api-cert"
  AZURE_CUSTOM_DOMAIN: "robot-api-milad9a.westeurope.azurecontainer.io"

# BUILD STAGE: Compile Go application
build:
  stage: build
  image: golang:${GO_VERSION}-alpine
  before_script:
    - echo "üî® Building Robot API..."
    - go version
  script:
    - echo "üì¶ Downloading dependencies..."
    - go mod download
    - go mod verify
    - echo "üî® Building application..."
    - go build -o robot-api .
    - echo "‚úÖ Build completed successfully"
    - ls -la robot-api
  artifacts:
    paths:
      - robot-api
    expire_in: 1 hour
  cache:
    key: go-mod-cache
    paths:
      - /go/pkg/mod/

# TEST STAGE: Execute unit tests
test:
  stage: test
  image: golang:${GO_VERSION}-alpine
  dependencies:
    - build
  before_script:
    - echo "üß™ Running unit tests..."
    - go version
  script:
    - echo "üì¶ Downloading dependencies for tests..."
    - go mod download
    - echo "üß™ Executing unit tests..."
    - go test -v -cover ./...
    - echo "‚úÖ All tests passed"
  coverage: '/coverage: \d+\.\d+% of statements/'
  cache:
    key: go-mod-cache
    paths:
      - /go/pkg/mod/
    policy: pull

# DEPLOY STAGE: Build Docker image and deploy to Azure with HTTPS
deploy:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay2
  before_script:
    - echo "üöÄ Starting deployment process with HTTPS support..."

    # Load local environment for gitlab-ci-local testing
    - |
      if [ -f ".gitlab-ci-local.env" ]; then
        echo "üìÑ Loading local environment variables for testing..."
        set -a  # automatically export all variables
        source .gitlab-ci-local.env
        set +a
      fi

    # Install build dependencies and Azure CLI with virtual environment
    - apk add --no-cache python3 py3-pip bash curl wget jq gcc musl-dev python3-dev linux-headers
    - python3 -m venv /tmp/azure-venv
    - source /tmp/azure-venv/bin/activate
    - pip install --upgrade pip
    - pip install azure-cli

    # Set up registry authentication - Use GitLab CI variables when available
    - |
      if [ -n "$CI_REGISTRY_USER" ] && [ -n "$CI_REGISTRY_PASSWORD" ]; then
        echo "üîê Using GitLab CI built-in registry credentials"
        REGISTRY_USER="$CI_REGISTRY_USER"
        REGISTRY_PASSWORD="$CI_REGISTRY_PASSWORD"
        REGISTRY_URL="$CI_REGISTRY"
      else
        echo "üîê Using custom registry credentials from environment"
        # For local testing, these should be loaded from .gitlab-ci-local.env
        if [ -z "$CI_REGISTRY_USER" ] || [ -z "$CI_REGISTRY_PASSWORD" ]; then
          echo "‚ùå ERROR: GitLab registry credentials not set"
          echo "For GitLab CI: These are set automatically"
          echo "For local testing: Update your Personal Access Token in .gitlab-ci-local.env"
          echo "Token needs 'read_registry' and 'write_registry' scopes"
          exit 1
        fi
        REGISTRY_USER="$CI_REGISTRY_USER" 
        REGISTRY_PASSWORD="$CI_REGISTRY_PASSWORD"
        REGISTRY_URL="${CI_REGISTRY:-registry.gitlab.com}"
      fi

    # Validate Azure credentials
    - |
      if [ -z "$AZURE_SP_ID" ] || [ -z "$AZURE_SP_PASSWORD" ] || [ -z "$AZURE_TENANT_ID" ]; then
        echo "‚ùå ERROR: Azure credentials not set"
        echo "Required: AZURE_SP_ID, AZURE_SP_PASSWORD, AZURE_TENANT_ID"
        echo "For GitLab CI: Set as protected variables in project settings"
        echo "For local testing: Ensure they are set in .gitlab-ci-local.env"
        exit 1
      fi

    # Docker Registry Login
    - echo "üîê Logging into GitLab Container Registry..."
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin "$REGISTRY_URL"

    # Azure Login
    - echo "üîê Logging into Azure..."
    - az login --service-principal -u "$AZURE_SP_ID" -p "$AZURE_SP_PASSWORD" --tenant "$AZURE_TENANT_ID"
    - az account show

  script:
    # Activate virtual environment for script execution
    - source /tmp/azure-venv/bin/activate

    # Set up image name - Use actual CI variables when available
    - |
      if [ -n "$CI_PROJECT_PATH" ]; then
        PROJECT_PATH="$CI_PROJECT_PATH"
      else
        PROJECT_PATH="hsbremen/mkss2/sose-2025/labor/robot-api-awad"
        echo "üîß Using fallback project path: $PROJECT_PATH"
      fi

      REGISTRY_URL="${CI_REGISTRY:-registry.gitlab.com}"
      export FULL_IMAGE_NAME="$REGISTRY_URL/$PROJECT_PATH/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"

    # Build Docker image
    - echo "üê≥ Building Docker image..."
    - docker build -t $FULL_IMAGE_NAME .
    - echo "‚úÖ Docker image built successfully"

    # List images for debugging
    - docker images | grep robot-api || echo "No robot-api images found"

    # Push image to registry
    - echo "üì§ Pushing image to GitLab Container Registry..."
    - docker push $FULL_IMAGE_NAME
    - echo "‚úÖ Image pushed successfully"

    # Prepare Azure infrastructure with Application Gateway for HTTPS
    - echo "‚òÅÔ∏è Preparing Azure infrastructure with HTTPS support..."
    - az group create --name $AZURE_RESOURCE_GROUP --location $AZURE_LOCATION || true
    - az provider register --namespace Microsoft.ContainerInstance || true
    - az provider register --namespace Microsoft.Network || true

    # Wait for provider registration
    - |
      echo "‚è≥ Waiting for Azure Container Instance provider registration..."
      for i in {1..30}; do
        STATUS=$(az provider show --namespace Microsoft.ContainerInstance --query registrationState -o tsv)
        echo "Registration status: $STATUS (attempt $i/30)"
        if [ "$STATUS" = "Registered" ]; then
          echo "‚úÖ Provider registered successfully"
          break
        fi
        sleep 10
      done

    # Clean up existing container if present
    - echo "üßπ Cleaning up existing container..."
    - az container delete --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CONTAINER_NAME --yes || true
    - sleep 15

    # Deploy container with HTTPS-ready configuration
    - echo "üöÄ Deploying to Azure Container Instances with HTTPS support..."
    - |
      az container create \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name $AZURE_CONTAINER_NAME \
        --image $FULL_IMAGE_NAME \
        --dns-name-label $AZURE_DNS_LABEL \
        --ports 80 443 8080 \
        --protocol TCP \
        --registry-login-server $REGISTRY_URL \
        --registry-username $REGISTRY_USER \
        --registry-password $REGISTRY_PASSWORD \
        --os-type Linux \
        --cpu 1 \
        --memory 1.5 \
        --environment-variables PORT=8080 GIN_MODE=release ENABLE_HTTPS=true \
        --restart-policy OnFailure

    # Create Application Gateway for HTTPS termination
    - echo "üîí Setting up Application Gateway for HTTPS termination..."
    - |
      # Create virtual network for Application Gateway
      echo "üì° Creating virtual network..."
      az network vnet create \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name robot-api-vnet \
        --address-prefix 10.0.0.0/16 \
        --subnet-name robot-api-subnet \
        --subnet-prefix 10.0.0.0/24 || true

      # Create public IP for Application Gateway with unified DNS name
      echo "üåê Creating public IP..."
      az network public-ip create \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name robot-api-gateway-ip \
        --allocation-method Static \
        --sku Standard \
        --dns-name robot-api-milad9a || true

      # Get container IP
      CONTAINER_IP=$(az container show \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name $AZURE_CONTAINER_NAME \
        --query ipAddress.ip -o tsv)

      echo "üìç Container IP: $CONTAINER_IP"

      # Generate self-signed certificate for testing - use the unified domain
      echo "üîê Creating self-signed certificate for HTTPS testing..."
      apk add --no-cache openssl
      openssl req -x509 -newkey rsa:4096 -keyout robot-api-key.pem -out robot-api-cert.pem -days 365 -nodes \
        -subj "/C=DE/ST=Bremen/L=Bremen/O=HSB/OU=MKSS2/CN=robot-api-milad9a.westeurope.cloudapp.azure.com"

      # Convert to PFX format (required by Application Gateway)
      openssl pkcs12 -export -out robot-api.pfx -inkey robot-api-key.pem -in robot-api-cert.pem -passout pass:TempPassword123!

      # Check if Application Gateway exists
      GATEWAY_EXISTS=$(az network application-gateway list \
        --resource-group $AZURE_RESOURCE_GROUP \
        --query "[?name=='robot-api-gateway'].name" -o tsv)

      if [ -z "$GATEWAY_EXISTS" ]; then
        echo "üèóÔ∏è Creating new Application Gateway..."
        # Create Application Gateway with basic HTTP configuration first
        az network application-gateway create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name robot-api-gateway \
          --location $AZURE_LOCATION \
          --vnet-name robot-api-vnet \
          --subnet robot-api-subnet \
          --capacity 1 \
          --sku Standard_v2 \
          --http-settings-cookie-based-affinity Disabled \
          --frontend-port 80 \
          --http-settings-port 8080 \
          --http-settings-protocol Http \
          --public-ip-address robot-api-gateway-ip \
          --servers $CONTAINER_IP \
          --priority 1000
        
        echo "‚úÖ Application Gateway created successfully"
      else
        echo "üîÑ Application Gateway already exists, updating backend pool..."
        # Update backend pool with new container IP
        az network application-gateway address-pool update \
          --gateway-name robot-api-gateway \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name appGatewayBackendPool \
          --servers $CONTAINER_IP || true
      fi

      # Wait for gateway to be ready
      echo "‚è≥ Waiting for Application Gateway to be ready..."
      sleep 30

      # Configure HTTPS with FIXED command syntax
      echo "üîí Configuring HTTPS..."

      # Upload SSL certificate
      az network application-gateway ssl-cert create \
        --gateway-name robot-api-gateway \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name robot-api-ssl-cert \
        --cert-file robot-api.pfx \
        --cert-password TempPassword123! 2>/dev/null || echo "Certificate already exists"

      # Add HTTPS frontend port
      az network application-gateway frontend-port create \
        --gateway-name robot-api-gateway \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name httpsPort \
        --port 443 2>/dev/null || echo "HTTPS port already exists"

      # Add HTTPS listener with FIXED syntax (removed --protocol parameter)
      echo "Creating HTTPS listener..."
      if ! az network application-gateway http-listener show \
        --gateway-name robot-api-gateway \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name httpsListener >/dev/null 2>&1; then
        
        az network application-gateway http-listener create \
          --gateway-name robot-api-gateway \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name httpsListener \
          --frontend-ip appGatewayFrontendIP \
          --frontend-port httpsPort \
          --ssl-cert robot-api-ssl-cert
        echo "‚úÖ HTTPS listener created"
      else
        echo "HTTPS listener already exists"
      fi

      # Add HTTPS routing rule with CORRECTED syntax
      echo "Creating HTTPS routing rule..."
      if ! az network application-gateway rule show \
        --gateway-name robot-api-gateway \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name httpsRule >/dev/null 2>&1; then
        
        az network application-gateway rule create \
          --gateway-name robot-api-gateway \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name httpsRule \
          --http-listener httpsListener \
          --rule-type Basic \
          --address-pool appGatewayBackendPool \
          --http-settings appGatewayBackendHttpSettings \
          --priority 2000
        echo "‚úÖ HTTPS rule created"
      else
        echo "HTTPS rule already exists"
      fi

      # Wait longer for Application Gateway to be fully configured
      echo "‚è≥ Waiting for Application Gateway HTTPS configuration to propagate..."
      sleep 120

      # Verify Application Gateway configuration with detailed output
      echo "üîç Verifying Application Gateway configuration..."
      az network application-gateway show \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name robot-api-gateway \
        --query '{
          operationalState:operationalState,
          frontendPorts:frontendPorts[].{port:port,name:name},
          listeners:httpListeners[].{name:name,sslCertificate:sslCertificate.id,port:frontendPort.id},
          rules:requestRoutingRules[].{name:name,priority:priority,listener:httpListener.id}
        }' \
        --output table || true

      # Get the Application Gateway public IP FQDN
      GATEWAY_FQDN=$(az network public-ip show \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name robot-api-gateway-ip \
        --query dnsSettings.fqdn -o tsv) || GATEWAY_FQDN=""

      echo "üåê Unified Domain: $GATEWAY_FQDN"

      # Test HTTPS connectivity with detailed diagnostics
      echo "üîç Testing HTTPS connectivity..."
      curl -v -k --connect-timeout 10 --max-time 15 \
        "https://$GATEWAY_FQDN/health" 2>&1 | head -20 || {
        echo "‚ùå HTTPS connection failed"
        echo "Checking if port 443 is accessible..."
        timeout 10s telnet "$GATEWAY_FQDN" 443 || echo "Port 443 not accessible"
      }

      # Clean up certificate files
      rm -f robot-api-key.pem robot-api-cert.pem robot-api.pfx

      echo "‚úÖ HTTPS configuration completed"

    # Verify deployment
    - echo "‚è≥ Waiting for container to start..."
    - sleep 45

    # Check container status
    - echo "üîç Checking container status..."
    - az container show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CONTAINER_NAME --query provisioningState -o tsv

    # Get FQDN
    - |
      FQDN=$(az container show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CONTAINER_NAME --query ipAddress.fqdn -o tsv)
      echo "üåê Container FQDN: $FQDN"

    # Perform API tests with both HTTP and HTTPS
    - echo "üß™ Testing deployed API with HTTPS support..."

    # Get the Application Gateway public IP FQDN
    - |
      GATEWAY_FQDN=$(az network public-ip show \
        --resource-group $AZURE_RESOURCE_GROUP \
        --name robot-api-gateway-ip \
        --query dnsSettings.fqdn -o tsv) || GATEWAY_FQDN=""

      if [ -n "$GATEWAY_FQDN" ]; then
        echo "üåê Unified Domain: $GATEWAY_FQDN"
        echo "üåê HTTP endpoint: http://$GATEWAY_FQDN"
        echo "üåê HTTPS endpoint: https://$GATEWAY_FQDN"
        
        # Test HTTP through Application Gateway
        echo "Testing HTTP through Application Gateway..."
        curl -f --connect-timeout 10 --max-time 30 "http://$GATEWAY_FQDN/health" || echo "‚ö†Ô∏è Gateway HTTP health check failed"
        
        # Test HTTPS through Application Gateway with better error handling
        echo "Testing HTTPS through Application Gateway..."
        echo "Attempting HTTPS connection..."
        
        # Test with shorter timeout first to fail fast
        if curl -k -f --connect-timeout 15 --max-time 30 "https://$GATEWAY_FQDN/health"; then
          echo "‚úÖ HTTPS endpoint is working correctly"
        else
          echo "‚ö†Ô∏è HTTPS endpoint failed, attempting diagnosis..."
          
          # Check if the Application Gateway listeners are configured
          echo "Checking Application Gateway listeners..."
          az network application-gateway http-listener list \
            --gateway-name robot-api-gateway \
            --resource-group $AZURE_RESOURCE_GROUP \
            --query '[].{name:name,sslCertificate:sslCertificate.id,port:frontendPort.id}' \
            --output table || echo "Failed to list listeners"
          
          # Check routing rules
          echo "Checking routing rules..."
          az network application-gateway rule list \
            --gateway-name robot-api-gateway \
            --resource-group $AZURE_RESOURCE_GROUP \
            --query '[].{name:name,priority:priority,listener:httpListener.id}' \
            --output table || echo "Failed to list rules"
          
          # Check backend health
          echo "Checking Application Gateway backend health..."
          az network application-gateway show-backend-health \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name robot-api-gateway \
            --query 'backendAddressPools[0].backendHttpSettingsCollection[0].servers[0].{address:address,health:health}' \
            --output table || echo "Backend health check failed"
        fi
      else
        echo "‚ö†Ô∏è Application Gateway not available, testing direct container access"
      fi

    # Test direct container access
    - |
      FQDN=$(az container show --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CONTAINER_NAME --query ipAddress.fqdn -o tsv)
      echo "üåê Container FQDN: $FQDN"

    # Health Check with retry
    - echo "Testing health endpoint..."
    - |
      for i in {1..10}; do
        echo "Health check attempt $i/10..."
        if curl -f --connect-timeout 10 --max-time 30 "http://$FQDN:8080/health"; then
          echo "‚úÖ Health check passed"
          break
        else
          echo "‚ùå Health check attempt $i failed, retrying in 15 seconds..."
          sleep 15
        fi
      done

    # API Endpoint Tests
    - echo "Testing API endpoints..."
    - curl -f --max-time 10 "http://$FQDN:8080/" || echo "‚ö†Ô∏è Root endpoint check failed"
    - curl -f --max-time 10 "http://$FQDN:8080/items" || echo "‚ö†Ô∏è Items endpoint check failed"
    - curl -f --max-time 10 "http://$FQDN:8080/robot/robot1/status" || echo "‚ö†Ô∏è Robot status check failed"

    # Functional test: Robot Movement
    - |
      echo "Testing robot movement..."
      curl -f --max-time 10 -X POST "http://$FQDN:8080/robot/robot1/move" \
        -H "Content-Type: application/json" \
        -d '{"direction": "up"}' || echo "‚ö†Ô∏è Robot movement test failed"

    # Report deployment success with unified domain
    - echo ""
    - echo "üéâ Deployment successful with unified HTTP/HTTPS domain!"
    - echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    - |
      if [ -n "$GATEWAY_FQDN" ]; then
        echo "üåê Unified Domain: $GATEWAY_FQDN"
        echo "üîì HTTP URL: http://$GATEWAY_FQDN"
        echo "üîí HTTPS URL: https://$GATEWAY_FQDN"
        echo "‚ö†Ô∏è  Using self-signed certificate (browser will show warning)"
        echo "üí° Same domain works for both HTTP and HTTPS!"
      fi
    - echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

  # Only deploy on main/master branch
  only:
    - main
    - master

# Cleanup Job (runs when needed)
cleanup:
  stage: deploy
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  before_script:
    # Load local environment for gitlab-ci-local testing
    - |
      if [ -f ".gitlab-ci-local.env" ]; then
        echo "üìÑ Loading local environment variables for testing..."
        set -a  # automatically export all variables
        source .gitlab-ci-local.env
        set +a
      fi

    # Validate environment variables first
    - |
      if [ -z "$AZURE_SP_ID" ] || [ -z "$AZURE_SP_PASSWORD" ] || [ -z "$AZURE_TENANT_ID" ]; then
        echo "‚ùå ERROR: Azure credentials not set"
        echo "Required: AZURE_SP_ID, AZURE_SP_PASSWORD, AZURE_TENANT_ID"
        echo "For GitLab CI: Set as protected variables in project settings"
        echo "For local testing: Ensure they are set in .gitlab-ci-local.env"
        exit 1
      fi

    - apk add --no-cache python3 py3-pip gcc musl-dev python3-dev linux-headers
    - python3 -m venv /tmp/azure-venv
    - source /tmp/azure-venv/bin/activate
    - pip install --upgrade pip
    - pip install azure-cli
    - az login --service-principal -u "$AZURE_SP_ID" -p "$AZURE_SP_PASSWORD" --tenant "$AZURE_TENANT_ID"
  script:
    - source /tmp/azure-venv/bin/activate
    - echo "üßπ Cleaning up Azure resources..."
    - az container delete --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CONTAINER_NAME --yes || true
    - echo "‚úÖ Cleanup completed"
  when: manual
  only:
    - main
    - master
